#include <iostream>
#include <fstream>
#include <algorithm>
#include <stdexcept>
using namespace std;

const int not_a_square_matrix = 0;
const int out_of_array = 1;


class Error
{
private:
	int err_type;
public:
	Error(int i) : err_type(i) {};
	int ErrType() const
	{
		return err_type;
	}
	~Error(){};
};

class Zn //множество вычетов по модулю 5
{
private:
	unsigned int c; //образ числа

public:
	Zn()
	{
		c = 0;
	}
	Zn(int n_v) : c(n_v % 5){};

	Zn operator + (const Zn& obj) //сложение по модулю 5
	{
		return (c + obj.c);
	}

	Zn operator * (const Zn& obj) //умножение по модулю 5
	{
		Zn result;
		result.c = (c * obj.c);
		return result;
	}

	friend fstream& operator << (fstream&, Zn&);
	friend istream& operator >> (istream&, Zn&);
	friend ostream& operator << (ostream&, Zn&);
	~Zn(){}; //деструктор
};
istream& operator >> (istream& f, Zn& obj)
{
	return f >> obj.c;
}
ostream& operator << (ostream& c, Zn& obj)
{
	c << obj.c;
	return c;
}

void addNum(int& k)
{
	k += 5;
	return;
}
void addIndex(int& k)
{
	static int ind = 0;
	ind++;
	if (ind % 3 == 0)
		k += 3;
	else if (ind % 3 == 1)
		k += 1;
	else if (ind % 3 == 2)
		k += 2;
}
bool isAnswer(int& k)
{
	//5x-75=0
	if (k == 75 / 5)
		return true;
	else
		return false;
}


template <class T>
class MatrixZn
{
private:
	T** matr;//сама матрица
	unsigned int n; //строки
	unsigned int m; //столбцы

public:
	MatrixZn(T** matr_v, int n_v, int m_v) : n(n_v), m(m_v)
	{
		if (n != m) throw Error(not_a_square_matrix);
		matr = new T*[n];
		for (unsigned int i = 0; i < n; i++)
		{
			matr[i] = new T[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = matr_v[i][j];
			}
		}
	}
	MatrixZn(int n_v, int m_v, T** matr_v = nullptr) : n(n_v), m(m_v)
	{
		T** matr = new T*[n];
		for (unsigned int i = 0; i < n; i++)
		{
			matr[i] = new T[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = 0;
			}
		}
		if (matr_v)
		{
			for (unsigned int i = 0; i < n; i++)
			{
				for (unsigned int j = 0; j < m; j++)
				{
					matr[i][j] = matr_v[i][j];
				}
			}
		}

	}
	MatrixZn(const MatrixZn& obj) //конструктор копирования
	{
		n = obj.n;
		m = obj.m;
		T** matr = new T*[n];
		for (unsigned int i = 0; i < n; i++)
		{
			matr[i] = new T[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = obj.matr[i][j];
			}
		}
	}
	MatrixZn operator * (const T& obj) //умножение на объект класса Zn
	{
		MatrixZn result(*this);
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				result.matr[i][j] = matr[i][j] * obj;
			}
		}
		return result;
	}
	MatrixZn& operator ~()//транспонирование для квадратных матриц
	{
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = i; j < m; j++)
			{
				T k(matr[i][j]);
				matr[i][j] = matr[j][i];
				matr[j][i] = k;
			}
		}
		return *this;
	}
	MatrixZn operator | (const MatrixZn& obj) //конкатенация
	{
		MatrixZn mid(n, m + obj.m);
		MatrixZn concat(mid);
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				concat.matr[i][j] = matr[i][j];
			}
			for (unsigned int j = 0; j < obj.m; j++)
			{
				concat.matr[i][j + m] = obj.matr[i][j];
			}
		}
		return concat;
	}
	T& operator () (unsigned int i, unsigned int j) //получение элемента матрицы по индексу   
	{
		if ((i >= n) || (j >= m))
		{
			throw Error(out_of_array);
		}
		else
		{
			return matr[i][j];
		}
	}

	class Iterator : public iterator<input_iterator_tag, T>
	{
		T** matrI;
		int nI;//строки
		int mI;//столбцы
		int index;
	public:
		Iterator(T** matr, int n, int m, int it) : nI(n), mI(m), matrI(matr), index(it){};
		Iterator operator ++()
		{
			index++;
			return *this;
		}
		T& operator *()
		{
			if (index >= nI*mI)
				throw out_of_range("out of range");
			return matrI[index / nI][index % nI];
		}
		Iterator operator + (int n)
		{
			if (index + n >= nI*mI)
				throw out_of_range("out of range");
			index += n;
			return *this;
		}
		T* operator -> ()
		{
			if (index >= nI*mI)
				throw out_of_range("out of range");
			return *(matrI[index / n][insdex % n]);
		}
		bool operator ==(Iterator obj)
		{
			return (index == obj.index);
		}
		bool operator !=(Iterator obj)
		{
			return !(*this == obj);
		}
	};

	Iterator begin()
	{
		return Iterator(matr, n, m, 0);
	}
	Iterator end()
	{
		return Iterator(matr, n, m, n*m);
	}
	
	friend fstream& operator << (fstream&, MatrixZn&);
	friend fstream& operator >> (fstream&, MatrixZn&);
	template <class T>
	friend ostream& operator << (ostream& c, MatrixZn<T>& obj);

	~MatrixZn()
	{
		for (unsigned int i = 0; i < n; i++)
		{
			delete[] matr[i];
		}
		delete[] matr;
	}
};

template <class T>
fstream& operator >> (fstream& f, MatrixZn<T>& obj) ///////////////////////////////////////////////
{
	char c = '\0';
	f.seekg(0, ios_base::beg);
	unsigned int col = obj.m;
	unsigned int str = obj.n;
	for (unsigned i = 0; i < str; i++)
	{
		for (unsigned int j = 0; j < col; j++)
		{
			f >> obj.matr[i][j];
		}
	}
	return f;
}

template <class T>
fstream& operator << (fstream& f, MatrixZn<T>& obj)
{
	for (unsigned int i = 0; i < obj.n; i++)
	{
		for (unsigned int j = 0; j < obj.m; j++)
		{
			f << obj.matr[i][j];
			f << "  ";
		}
		f << endl;
	}
	return f;
}

template <class T>
ostream& operator << (ostream& c, MatrixZn<T>& obj)
{
	for (unsigned int i = 0; i < obj.n; i++)
	{
		for (unsigned int j = 0; j < obj.m; j++)
		{
			c << obj.matr[i][j];
			c << "  ";
		}
		c << endl;
	}
	return c;
}

int** create_M1()
{
	int** contrM = new int*[2];
	for (int i = 0; i < 3; i++)
	{
		contrM[i] = new int[2];
	}
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			contrM[i][j] = rand() % 10 + 1;
		}
	}
	return contrM;
}
int** create_M2()
{
	int** contrM2 = new int*[2];
	for (int i = 0; i < 2; i++)
	{
		contrM2[i] = new int[2];
	}
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			contrM2[i][j] = rand() % 10 + 1;
		}
	}
	return contrM2;
}

int main()
{
	try
	{
		int** m1 = create_M1();
		int** m2 = create_M2();
		MatrixZn<int> matr(m1, 2, 2);
		MatrixZn<int> matr2(m1, 2, 2);

		for (auto i = matr.begin(); i != matr.end(); i++)
			cout << *i << " ";
		cout << endl;

		for_each(matr.begin(), matr.end(), addNum);
		for (auto i = matr.begin(); i != matr.end(); i++)
			cout << *i << " ";
		cout << endl;

		for_each(matr.begin(), matr.end(), addIndex);
		for (auto i = matr.begin(); i != matr.end(); i++)
			cout << *i << " ";
		cout << endl;

		int myCount = count(matr.begin(), matr.end(), 13);
		cout << "num of 13 = " << myCount << endl;

		//количество элементов удовл kx + b = 0
		int myCountIf = count_if(matr.begin(), matr.end(), isAnswer);
		cout << "num of answers 5x - 75 = 0: " << myCountIf << endl;

		auto result = find(matr.begin(), matr.end(), 7);
		if (result != matr.end())
			cout << "7 exist in matr" << endl;
		else
			cout << "7 doesn't exist in matr" << endl;
	}
	catch (exception& e)
	{
		cerr << e.what() << endl;
	}
	system("pause");
	return 0;
}
